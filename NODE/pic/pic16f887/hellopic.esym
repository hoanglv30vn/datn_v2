D G "__PCM__" 0 237 ""5.015""
D G "__DEVICE__" 0 237 "887"
D G "__DATE__" 0 237 ""30-Nov-21""
D G "__TIME__" 0 237 ""00:45:10"" "Standard Header file for the PIC16F887 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
v L "value" 2 39 "int8" `54 
f B "set_tris_a" 2 39 "void(int8 value)" `53 
v L "value" 2 40 "int8" `56 
f B "set_tris_b" 2 40 "void(int8 value)" `55 
v L "value" 2 41 "int8" `58 
f B "set_tris_c" 2 41 "void(int8 value)" `57 
v L "value" 2 42 "int8" `60 
f B "set_tris_d" 2 42 "void(int8 value)" `59 
v L "value" 2 43 "int8" `62 
f B "set_tris_e" 2 43 "void(int8 value)" `61 
f B "get_tris_a" 2 44 "int8()" `63 
f B "get_tris_b" 2 45 "int8()" `64 
f B "get_tris_c" 2 46 "int8()" `65 
f B "get_tris_d" 2 47 "int8()" `66 
f B "get_tris_e" 2 48 "int8()" `67 
v L "value" 2 49 "int8" `69 
f B "output_a" 2 49 "void(int8 value)" `68 
v L "value" 2 50 "int8" `71 
f B "output_b" 2 50 "void(int8 value)" `70 
v L "value" 2 51 "int8" `73 
f B "output_c" 2 51 "void(int8 value)" `72 
v L "value" 2 52 "int8" `75 
f B "output_d" 2 52 "void(int8 value)" `74 
v L "value" 2 53 "int8" `77 
f B "output_e" 2 53 "void(int8 value)" `76 
f B "input_a" 2 54 "int8()" `78 
f B "input_b" 2 55 "int8()" `79 
f B "input_c" 2 56 "int8()" `80 
f B "input_d" 2 57 "int8()" `81 
f B "input_e" 2 58 "int8()" `82 
f B "input_change_a" 2 59 "int8()" `83 
f B "input_change_b" 2 60 "int8()" `84 
f B "input_change_c" 2 61 "int8()" `85 
f B "input_change_d" 2 62 "int8()" `86 
f B "input_change_e" 2 63 "int8()" `87 
v L "pin" 2 64 "int16" `89 
f B "input" 2 64 "int8(int16 pin)" `88 
v L "pin" 2 65 "int16" `91 
f B "input_state" 2 65 "int8(int16 pin)" `90 
v L "pin" 2 66 "int16" `93 
f B "output_low" 2 66 "void(int16 pin)" `92 
v L "pin" 2 67 "int16" `95 
f B "output_high" 2 67 "void(int16 pin)" `94 
v L "pin" 2 68 "int16" `97 
f B "output_toggle" 2 68 "void(int16 pin)" `96 
v L "pin" 2 69 "int16" `99 
v L "level" 2 69 "int8" `100 
f B "output_bit" 2 69 "void(int16 pin,int8 level)" `98 
v L "pin" 2 70 "int16" `102 
f B "output_float" 2 70 "void(int16 pin)" `101 
v L "pin" 2 71 "int16" `104 
f B "output_drive" 2 71 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 75 "40"
d G "PIN_A1" 2 76 "41"
d G "PIN_A2" 2 77 "42"
d G "PIN_A3" 2 78 "43"
d G "PIN_A4" 2 79 "44"
d G "PIN_A5" 2 80 "45"
d G "PIN_A6" 2 81 "46"
d G "PIN_A7" 2 82 "47"
d G "PIN_B0" 2 84 "48"
d G "PIN_B1" 2 85 "49"
d G "PIN_B2" 2 86 "50"
d G "PIN_B3" 2 87 "51"
d G "PIN_B4" 2 88 "52"
d G "PIN_B5" 2 89 "53"
d G "PIN_B6" 2 90 "54"
d G "PIN_B7" 2 91 "55"
d G "PIN_C0" 2 93 "56"
d G "PIN_C1" 2 94 "57"
d G "PIN_C2" 2 95 "58"
d G "PIN_C3" 2 96 "59"
d G "PIN_C4" 2 97 "60"
d G "PIN_C5" 2 98 "61"
d G "PIN_C6" 2 99 "62"
d G "PIN_C7" 2 100 "63"
d G "PIN_D0" 2 102 "64"
d G "PIN_D1" 2 103 "65"
d G "PIN_D2" 2 104 "66"
d G "PIN_D3" 2 105 "67"
d G "PIN_D4" 2 106 "68"
d G "PIN_D5" 2 107 "69"
d G "PIN_D6" 2 108 "70"
d G "PIN_D7" 2 109 "71"
d G "PIN_E0" 2 111 "72"
d G "PIN_E1" 2 112 "73"
d G "PIN_E2" 2 113 "74"
d G "PIN_E3" 2 114 "75"
d G "FALSE" 2 117 "0"
d G "TRUE" 2 118 "1"
d G "BYTE" 2 120 "int8"
d G "BOOLEAN" 2 121 "int1"
d G "getc" 2 123 "getch"
d G "fgetc" 2 124 "getch"
d G "getchar" 2 125 "getch"
d G "putc" 2 126 "putchar"
d G "fputc" 2 127 "putchar"
d G "fgets" 2 128 "gets"
d G "fputs" 2 129 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f B "restart_cause" 2 134 "int8()" `105 
f B "reset_cpu" 2 135 "void()" `106 
f B "sleep" 2 136 "void()" `107  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 2 138 "3"
d G "WDT_TIMEOUT" 2 139 "11"
d G "MCLR_FROM_SLEEP" 2 140 "19"
d G "MCLR_FROM_RUN" 2 141 "27"
d G "NORMAL_POWER_UP" 2 142 "25"
d G "BROWNOUT_RESTART" 2 143 "26"
c L "sleep" 2 3 5 "FUNCTION"
v L "mode" 2 150 "int8" `109 
f B "setup_timer_0" 2 150 "void(int8 mode)" `108 
v L "value" 2 151 "int8" `111 
f B "set_timer0" 2 151 "void(int8 value)" `110 
f B "get_timer0" 2 152 "int8()" `112 
v L "mode" 2 153 "int8" `114 
v L "prescaler" 2 153 "int8" `115 
f B "setup_counters" 2 153 "void(int8 mode,int8 prescaler)" `113 
v L "value" 2 154 "int8" `117 
f B "set_rtcc" 2 154 "void(int8 value)" `116 
f B "get_rtcc" 2 155 "int8()" `118  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 157 "0"
d G "T0_EXT_L_TO_H" 2 158 "32"
d G "T0_EXT_H_TO_L" 2 159 "48"
d G "T0_DIV_1" 2 161 "8"
d G "T0_DIV_2" 2 162 "0"
d G "T0_DIV_4" 2 163 "1"
d G "T0_DIV_8" 2 164 "2"
d G "T0_DIV_16" 2 165 "3"
d G "T0_DIV_32" 2 166 "4"
d G "T0_DIV_64" 2 167 "5"
d G "T0_DIV_128" 2 168 "6"
d G "T0_DIV_256" 2 169 "7"
d G "T0_8_BIT" 2 172 "0"
d G "RTCC_INTERNAL" 2 174 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 175 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 176 "48"
d G "RTCC_DIV_1" 2 177 "8"
d G "RTCC_DIV_2" 2 178 "0"
d G "RTCC_DIV_4" 2 179 "1"
d G "RTCC_DIV_8" 2 180 "2"
d G "RTCC_DIV_16" 2 181 "3"
d G "RTCC_DIV_32" 2 182 "4"
d G "RTCC_DIV_64" 2 183 "5"
d G "RTCC_DIV_128" 2 184 "6"
d G "RTCC_DIV_256" 2 185 "7"
d G "RTCC_8_BIT" 2 186 "0"
c L "get_rtcc" 2 3 8 "FUNCTION"
v L "mode" 2 197 "int16" `120 
f B "setup_wdt" 2 197 "void(int16 mode)" `119 
f B "restart_wdt" 2 198 "void()" `121  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 2 201 "8"
d G "WDT_36MS" 2 202 "9"
d G "WDT_72MS" 2 203 "10"
d G "WDT_144MS" 2 204 "11"
d G "WDT_288MS" 2 205 "12"
d G "WDT_576MS" 2 206 "13"
d G "WDT_1152MS" 2 207 "14"
d G "WDT_2304MS" 2 208 "15"
d G "WDT_ON" 2 213 "0x4000"
d G "WDT_OFF" 2 214 "0"
d G "WDT_DIV_16" 2 215 "0x100"
d G "WDT_DIV_8" 2 216 "0x300"
d G "WDT_DIV_4" 2 217 "0x500"
d G "WDT_DIV_2" 2 218 "0x700"
d G "WDT_TIMES_1" 2 219 "0x900" "Default"
d G "WDT_TIMES_2" 2 220 "0xB00"
d G "WDT_TIMES_4" 2 221 "0xD00"
d G "WDT_TIMES_8" 2 222 "0xF00"
d G "WDT_TIMES_16" 2 223 "0x1100"
d G "WDT_TIMES_32" 2 224 "0x1300"
d G "WDT_TIMES_64" 2 225 "0x1500"
d G "WDT_TIMES_128" 2 226 "0x1700"
c L "restart_wdt" 2 3 3 "FUNCTION"
v L "mode" 2 231 "int16" `123 
f B "setup_timer_1" 2 231 "void(int16 mode)" `122 
f B "get_timer1" 2 232 "int16()" `124 
v L "value" 2 233 "int16" `126 
f B "set_timer1" 2 233 "void(int16 value)" `125  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 236 "0"
d G "T1_INTERNAL" 2 237 "5"
d G "T1_EXTERNAL" 2 238 "7"
d G "T1_EXTERNAL_SYNC" 2 239 "3"
d G "T1_CLK_OUT" 2 241 "8"
d G "T1_DIV_BY_1" 2 243 "0"
d G "T1_DIV_BY_2" 2 244 "0x10"
d G "T1_DIV_BY_4" 2 245 "0x20"
d G "T1_DIV_BY_8" 2 246 "0x30"
d G "T1_GATE" 2 248 "0x40"
d G "T1_GATE_INVERTED" 2 249 "0xC0"
c L "set_timer1" 2 3 3 "FUNCTION"
v L "mode" 2 254 "int8" `128 
v L "period" 2 254 "int8" `129 
v L "postscale" 2 254 "int8" `130 
f B "setup_timer_2" 2 254 "void(int8 mode,int8 period,int8 postscale)" `127 
f B "get_timer2" 2 255 "int8()" `131 
v L "value" 2 256 "int8" `133 
f B "set_timer2" 2 256 "void(int8 value)" `132  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 258 "0"
d G "T2_DIV_BY_1" 2 259 "4"
d G "T2_DIV_BY_4" 2 260 "5"
d G "T2_DIV_BY_16" 2 261 "6"
c L "set_timer2" 2 3 4 "FUNCTION"
v L "mode" 2 267 "int32" `135 
f B "setup_ccp1" 2 267 "void(int32 mode)" `134 
v L "mode" 2 268 "int32" `137 
v L "pwm" 2 268 "int8" `138 
f G "setup_ccp1" 2 268 "void(int32 mode,int8 pwm)" `136 
v L "value" 2 269 "int16" `140 
f B "set_pwm1_duty" 2 269 "void(int16 value)" `139  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 271 "0"
d G "CCP_CAPTURE_FE" 2 272 "4"
d G "CCP_CAPTURE_RE" 2 273 "5"
d G "CCP_CAPTURE_DIV_4" 2 274 "6"
d G "CCP_CAPTURE_DIV_16" 2 275 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 276 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 277 "9"
d G "CCP_COMPARE_INT" 2 278 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 2 279 "0xB"
d G "CCP_PWM" 2 280 "0xC"
d G "CCP_PWM_PLUS_1" 2 281 "0x1c"
d G "CCP_PWM_PLUS_2" 2 282 "0x2c"
d G "CCP_PWM_PLUS_3" 2 283 "0x3c"
d G "CCP_PWM_H_H" 2 288 "0x0c"
d G "CCP_PWM_H_L" 2 289 "0x0d"
d G "CCP_PWM_L_H" 2 290 "0x0e"
d G "CCP_PWM_L_L" 2 291 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 293 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 294 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 295 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 297 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 298 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 299 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 300 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 301 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 302 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 303 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 305 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 306 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 307 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 309 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 310 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 311 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 313 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 315 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 316 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 317 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 318 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 319 "0x10000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
v L "mode" 2 323 "int32" `145 
f B "setup_ccp2" 2 323 "void(int32 mode)" `144 
v L "mode" 2 324 "int32" `147 
v L "pwm" 2 324 "int8" `148 
f G "setup_ccp2" 2 324 "void(int32 mode,int8 pwm)" `146 
v L "value" 2 325 "int16" `150 
f B "set_pwm2_duty" 2 325 "void(int16 value)" `149 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
v L "mode" 2 332 "int32" `155 
f B "setup_spi" 2 332 "void(int32 mode)" `154 
v L "value" 2 333 "int8" `157 
f B "spi_write" 2 333 "void(int8 value)" `156 
f B "spi_read" 2 334 "int8()" `158 
v L "value" 2 335 "int8" `160 
f G "spi_read" 2 335 "int8(int8 value)" `159 
f B "spi_data_in" 2 336 "int8()" `161  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 338 "0x00"
d G "SPI_MASTER" 2 339 "0x20"
d G "SPI_SLAVE" 2 340 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 341 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 342 "0x00"
d G "SPI_CLK_DIV_4" 2 343 "0x00"
d G "SPI_CLK_DIV_16" 2 344 "0x01"
d G "SPI_CLK_DIV_64" 2 345 "0x02"
d G "SPI_CLK_T2" 2 346 "0x03"
d G "SPI_SS_DISABLED" 2 347 "0x01"
d G "SPI_XMIT_L_TO_H" 2 349 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 350 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 352 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 353 "0x8000"
d G "SPI_L_TO_H" 2 356 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 357 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 3 2 "FUNCTION"
v L "baud" 2 361 "int32" `163 
f B "setup_uart" 2 361 "void(int32 baud)" `162 
v L "baud" 2 362 "int32" `165 
v L "stream" 2 362 "int8" `166 
f G "setup_uart" 2 362 "void(int32 baud,int8 stream)" `164 
v L "baud" 2 363 "int32" `168 
v L "stream" 2 363 "int8" `169 
v L "clock" 2 363 "int32" `170 
f G "setup_uart" 2 363 "void(int32 baud,int8 stream,int32 clock)" `167 
v L "baud" 2 364 "int32" `172 
f B "set_uart_speed" 2 364 "void(int32 baud)" `171 
v L "baud" 2 365 "int32" `174 
v L "stream" 2 365 "int8" `175 
f G "set_uart_speed" 2 365 "void(int32 baud,int8 stream)" `173 
v L "baud" 2 366 "int32" `177 
v L "stream" 2 366 "int8" `178 
v L "clock" 2 366 "int32" `179 
f G "set_uart_speed" 2 366 "void(int32 baud,int8 stream,int32 clock)" `176  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 370 "2"
d G "UART_DATA" 2 371 "4"
d G "UART_AUTODETECT" 2 372 "8"
d G "UART_AUTODETECT_NOWAIT" 2 373 "9"
d G "UART_WAKEUP_ON_RDA" 2 374 "10"
d G "UART_SEND_BREAK" 2 375 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
v L "mode" 2 379 "int32" `181 
f B "setup_comparator" 2 379 "void(int32 mode)" `180  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 383 "0x00"
d G "NC_NC" 2 384 "0x00"
d G "CP1_A0_A3" 2 387 "0x00090080"
d G "CP1_A1_A3" 2 388 "0x000A0081"
d G "CP1_B3_A3" 2 389 "0x00880082"
d G "CP1_B1_A3" 2 390 "0x00280083"
d G "CP1_A0_VREF" 2 391 "0x00010084"
d G "CP1_A1_VREF" 2 392 "0x00020085"
d G "CP1_B3_VREF" 2 393 "0x00800086"
d G "CP1_B1_VREF" 2 394 "0x00200087"
d G "CP1_OUT_ON_A4" 2 396 "0x00000020"
d G "CP1_INVERT" 2 397 "0x00000010"
d G "CP1_ABSOLUTE_VREF" 2 398 "0x20000000"
d G "CP2_A0_A2" 2 401 "0x00058000"
d G "CP2_A1_A2" 2 402 "0x00068100"
d G "CP2_B3_A2" 2 403 "0x00848200"
d G "CP2_B1_A2" 2 404 "0x00248300"
d G "CP2_A0_VREF" 2 405 "0x00018400"
d G "CP2_A1_VREF" 2 406 "0x00028500"
d G "CP2_B3_VREF" 2 407 "0x00808600"
d G "CP2_B1_VREF" 2 408 "0x00208700"
d G "CP2_OUT_ON_A5" 2 410 "0x00002000"
d G "CP2_INVERT" 2 411 "0x00001000"
d G "CP2_ABSOLUTE_VREF" 2 412 "0x10000000"
d G "CP2_T1_SYNC" 2 415 "0x01000000"
d G "CP2_T1_GATE" 2 416 "0x02000000"
c L "setup_comparator" 2 3 2 "FUNCTION"
v L "mode" 2 424 "int8" `185 
f B "setup_vref" 2 424 "void(int8 mode)" `184  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 426 "0xa0"
d G "VREF_HIGH" 2 427 "0x80"
c L "setup_vref" 2 3 3 "FUNCTION"
v L "mode" 2 433 "int8" `187 
f B "setup_oscillator" 2 433 "int8(int8 mode)" `186  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 435 "1"
d G "OSC_125KHZ" 2 436 "0x11"
d G "OSC_250KHZ" 2 437 "0x21"
d G "OSC_500KHZ" 2 438 "0x31"
d G "OSC_1MHZ" 2 439 "0x41"
d G "OSC_2MHZ" 2 440 "0x51"
d G "OSC_4MHZ" 2 441 "0x61"
d G "OSC_8MHZ" 2 442 "0x71"
d G "OSC_INTRC" 2 443 "1"
d G "OSC_NORMAL" 2 444 "0"
d G "OSC_STATE_STABLE" 2 446 "4"
d G "OSC_31KHZ_STABLE" 2 447 "2"
c L "setup_oscillator" 2 3 4 "FUNCTION"
v L "mode" 2 455 "int16" `189 
f B "setup_adc" 2 455 "void(int16 mode)" `188 
f B "read_adc" 2 456 "int8()" `190 
v L "mode" 2 457 "int8" `192 
f G "read_adc" 2 457 "int8(int8 mode)" `191 
f G "read_adc" 2 458 "int16()" `193 
v L "mode" 2 459 "int8" `195 
f G "read_adc" 2 459 "int16(int8 mode)" `194 
f B "adc_done" 2 460 "int8()" `196  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 462 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 463 "0x100"
d G "ADC_CLOCK_DIV_8" 2 464 "0x40"
d G "ADC_CLOCK_DIV_32" 2 465 "0x80"
d G "ADC_CLOCK_INTERNAL" 2 466 "0xc0" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
v L "pins" 2 469 "int32" `198 
f B "setup_adc_ports" 2 469 "void(int32 pins)" `197 
v L "pins" 2 470 "int32" `200 
v L "reference" 2 470 "int32" `201 
f G "setup_adc_ports" 2 470 "void(int32 pins,int32 reference)" `199 
v L "channel" 2 471 "int8" `203 
f B "set_adc_channel" 2 471 "void(int8 channel)" `202  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 475 "1" "| A0"
d G "sAN1" 2 476 "2" "| A1"
d G "sAN2" 2 477 "4" "| A2"
d G "sAN3" 2 478 "8" "| A3"
d G "sAN4" 2 479 "16" "| A5"
d G "sAN5" 2 480 "32" "| E0"
d G "sAN6" 2 481 "64" "| E1"
d G "sAN7" 2 482 "128" "| E2"
d G "sAN8" 2 483 "0x10000" "| B2"
d G "sAN9" 2 484 "0x20000" "| B3"
d G "sAN10" 2 485 "0x40000" "| B1"
d G "sAN11" 2 486 "0x80000" "| B4"
d G "sAN12" 2 487 "0x100000" "| B0"
d G "sAN13" 2 488 "0x200000" "| B5"
d G "NO_ANALOGS" 2 489 "0" "None"
d G "ALL_ANALOG" 2 490 "0x1F00FF" "A0 A1 A2 A3 A5 E0 E1 E2 B0 B1 B2 B3 B4 B5"
d G "VSS_VDD" 2 493 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 2 494 "0x1000" "| Range 0-Vref"
d G "VREF_VREF" 2 495 "0x3000" "| Range Vref-Vref"
d G "VREF_VDD" 2 496 "0x2000" "| Range Vref-Vdd"
d G "ADC_START_AND_READ" 2 499 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 500 "1"
d G "ADC_READ_ONLY" 2 501 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
v L "x" 2 507 "sint8" `205 
f B "abs" 2 507 "sint8(sint8 x)" `204 
v L "x" 2 508 "sint16" `207 
f G "abs" 2 508 "sint16(sint16 x)" `206 
v L "x" 2 509 "sint32" `209 
f G "abs" 2 509 "sint32(sint32 x)" `208 
v L "x" 2 510 "float" `211 
f G "abs" 2 510 "float(float x)" `210 
v L "??65535" 2 511 "int8" `213 
v L "??65535" 2 511 "int8" `214 
f B "_mul" 2 511 "int16(int8 ,int8 )" `212 
v L "??65535" 2 512 "sint8" `213 
v L "??65535" 2 512 "sint8" `217 
f G "_mul" 2 512 "sint16(sint8 ,sint8 )" `215 
v L "??65535" 2 513 "int16" `213 
v L "??65535" 2 513 "int16" `220 
f G "_mul" 2 513 "int32(int16 ,int16 )" `218 
v L "??65535" 2 514 "sint16" `213 
v L "??65535" 2 514 "sint16" `223 
f G "_mul" 2 514 "sint32(sint16 ,sint16 )" `221  "Memory Manipulation Prototypes:"
v L "bank" 2 517 "int8" `225 
v L "offset" 2 517 "int8" `226 
f B "read_bank" 2 517 "int8(int8 bank,int8 offset)" `224 
v L "bank" 2 518 "int8" `228 
v L "offset" 2 518 "int8" `229 
v L "value" 2 518 "int8" `230 
f B "write_bank" 2 518 "void(int8 bank,int8 offset,int8 value)" `227 
v L "dest" 2 519 "*int8" `232 
v L "src" 2 519 "*int8" `233 
f B "strcpy" 2 519 "void(*int8 dest,*int8 src)" `231 
v L "dest" 2 520 "*int8" `235 
v L "src" 2 520 "*int8" `236 
f B "strcopy" 2 520 "void(*int8 dest,*int8 src)" `234 
v L "destination" 2 521 "*int8" `238 
v L "value" 2 521 "int8" `239 
v L "num" 2 521 "int16" `240 
f B "memset" 2 521 "void(*int8 destination,int8 value,int16 num)" `237 
v L "destination" 2 522 "*int8" `242 
v L "source" 2 522 "*int8" `243 
v L "num" 2 522 "int16" `244 
f B "memcpy" 2 522 "void(*int8 destination,*int8 source,int16 num)" `241  "String Prototypes:"
v L "cvalue" 2 525 "int8" `246 
f B "toupper" 2 525 "int8(int8 cvalue)" `245 
v L "cvalue" 2 526 "int8" `248 
f B "tolower" 2 526 "int8(int8 cvalue)" `247 
v L "string" 2 527 "*int8" `250 
v L "cstring" 2 527 "*int8" `251 
f B "sprintf" 2 527 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `249  "Data Manipulators Prototypes:"
v L "address" 2 530 "*int8" `254 
v L "bytes" 2 530 "int8" `255 
v L "value" 2 530 "int8" `256 
f B "shift_left" 2 530 "int8(*int8 address,int8 bytes,int8 value)" `253 
v L "address" 2 531 "*int8" `258 
v L "bytes" 2 531 "int8" `259 
v L "value" 2 531 "int8" `260 
f B "shift_right" 2 531 "int8(*int8 address,int8 bytes,int8 value)" `257 
v L "address" 2 532 "*int8" `262 
v L "bytes" 2 532 "int8" `263 
f B "rotate_left" 2 532 "void(*int8 address,int8 bytes)" `261 
v L "address" 2 533 "*int8" `265 
v L "bytes" 2 533 "int8" `266 
f B "rotate_right" 2 533 "void(*int8 address,int8 bytes)" `264 
v L "value" 2 534 "int8" `268 
f B "swap" 2 534 "void(int8 value)" `267 
v L "var" 2 535 "int16" `270 
v L "offset" 2 535 "int8" `271 
f B "make8" 2 535 "int8(int16 var,int8 offset)" `269 
v L "var" 2 536 "int32" `270 
v L "offset" 2 536 "int8" `274 
f G "make8" 2 536 "int8(int32 var,int8 offset)" `272 
v L "varhigh" 2 537 "int8" `276 
v L "varlow" 2 537 "int8" `277 
f B "make16" 2 537 "int16(int8 varhigh,int8 varlow)" `275 
v L "var1" 2 538 "int16" `279 
f B "make32" 2 538 "int32(int16 var1)" `278 
v L "var1" 2 539 "int16" `281 
v L "var2" 2 539 "int16" `282 
f G "make32" 2 539 "int32(int16 var1,int16 var2)" `280 
v L "var1" 2 540 "int16" `281 
v L "var2" 2 540 "int8" `285 
f G "make32" 2 540 "int32(int16 var1,int8 var2)" `283 
v L "var1" 2 541 "int16" `287 
v L "var2" 2 541 "int8" `288 
v L "var3" 2 541 "int8" `289 
f G "make32" 2 541 "int32(int16 var1,int8 var2,int8 var3)" `286 
v L "var1" 2 542 "int8" `291 
f G "make32" 2 542 "int32(int8 var1)" `290 
v L "var1" 2 543 "int8" `281 
v L "var2" 2 543 "int8" `294 
f G "make32" 2 543 "int32(int8 var1,int8 var2)" `292 
v L "var1" 2 544 "int8" `287 
v L "var2" 2 544 "int8" `288 
v L "var3" 2 544 "int8" `298 
f G "make32" 2 544 "int32(int8 var1,int8 var2,int8 var3)" `295 
v L "var1" 2 545 "int8" `300 
v L "var2" 2 545 "int8" `301 
v L "var3" 2 545 "int8" `302 
v L "var4" 2 545 "int8" `303 
f G "make32" 2 545 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `299 
v L "var1" 2 546 "int8" `281 
v L "var2" 2 546 "int16" `306 
f G "make32" 2 546 "int32(int8 var1,int16 var2)" `304 
v L "var1" 2 547 "int8" `287 
v L "var2" 2 547 "int16" `288 
v L "var3" 2 547 "int8" `310 
f G "make32" 2 547 "int32(int8 var1,int16 var2,int8 var3)" `307 
v L "var1" 2 548 "int8" `287 
v L "var2" 2 548 "int8" `288 
v L "var3" 2 548 "int16" `314 
f G "make32" 2 548 "int32(int8 var1,int8 var2,int16 var3)" `311 
v L "var" 2 549 "int8" `316 
v L "bit" 2 549 "int8" `317 
f B "bit_set" 2 549 "void(int8 var,int8 bit)" `315 
v L "var" 2 550 "int16" `316 
v L "bit" 2 550 "int8" `320 
f G "bit_set" 2 550 "void(int16 var,int8 bit)" `318 
v L "var" 2 551 "int32" `316 
v L "bit" 2 551 "int8" `323 
f G "bit_set" 2 551 "void(int32 var,int8 bit)" `321 
v L "var" 2 552 "int8" `325 
v L "bit" 2 552 "int8" `326 
f B "bit_clear" 2 552 "void(int8 var,int8 bit)" `324 
v L "var" 2 553 "int16" `325 
v L "bit" 2 553 "int8" `329 
f G "bit_clear" 2 553 "void(int16 var,int8 bit)" `327 
v L "var" 2 554 "int32" `325 
v L "bit" 2 554 "int8" `332 
f G "bit_clear" 2 554 "void(int32 var,int8 bit)" `330 
v L "var" 2 555 "int8" `334 
v L "bit" 2 555 "int8" `335 
f B "bit_test" 2 555 "int8(int8 var,int8 bit)" `333 
v L "var" 2 556 "int16" `334 
v L "bit" 2 556 "int8" `338 
f G "bit_test" 2 556 "int8(int16 var,int8 bit)" `336 
v L "var" 2 557 "int32" `334 
v L "bit" 2 557 "int8" `341 
f G "bit_test" 2 557 "int8(int32 var,int8 bit)" `339  "#use delay() Prototypes:"
v L "count" 2 560 "int8" `343 
f B "delay_cycles" 2 560 "void(int8 count)" `342 
v L "time" 2 561 "int16" `345 
f B "delay_ms" 2 561 "void(int16 time)" `344 
v L "time" 2 562 "int16" `347 
f B "delay_us" 2 562 "void(int16 time)" `346  "#use rs232() Prototypes:"
v L "cdata" 2 565 "int8" `349 
f B "putchar" 2 565 "void(int8 cdata)" `348 
v L "cdata" 2 566 "int8" `351 
v L "stream" 2 566 "int8" `352 
f G "putchar" 2 566 "void(int8 cdata,int8 stream)" `350 
v L "string" 2 567 "*int8" `354 
f B "puts" 2 567 "void(*int8 string)" `353 
v L "string" 2 568 "*int8" `356 
v L "stream" 2 568 "int8" `357 
f G "puts" 2 568 "void(*int8 string,int8 stream)" `355 
f B "getch" 2 569 "int8()" `358 
v L "stream" 2 570 "int8" `360 
f G "getch" 2 570 "int8(int8 stream)" `359 
v L "string" 2 571 "*int8" `362 
f B "gets" 2 571 "void(*int8 string)" `361 
v L "string" 2 572 "*int8" `364 
v L "stream" 2 572 "int8" `365 
f G "gets" 2 572 "void(*int8 string,int8 stream)" `363 
f B "kbhit" 2 573 "int8()" `366 
v L "stream" 2 574 "int8" `368 
f G "kbhit" 2 574 "int8(int8 stream)" `367 
v L "string" 2 575 "*int8" `370 
f B "printf" 2 575 "void(*int8 string,*int8 _VA_LIST)" `369 
v L "stream" 2 576 "int8" `373 
v L "string" 2 576 "*int8" `374 
f B "fprintf" 2 576 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `372 
f B "putc_send" 2 577 "void()" `376 
v L "stream" 2 578 "int8" `378 
f B "fputc_send" 2 578 "void(int8 stream)" `377 
f B "rcv_buffer_full" 2 579 "int8()" `379 
v L "stream" 2 580 "int8" `381 
f G "rcv_buffer_full" 2 580 "int8(int8 stream)" `380 
f B "rcv_buffer_bytes" 2 581 "int16()" `382 
v L "stream" 2 582 "int8" `384 
f G "rcv_buffer_bytes" 2 582 "int16(int8 stream)" `383 
f B "tx_buffer_full" 2 583 "int8()" `385 
v L "stream" 2 584 "int8" `387 
f G "tx_buffer_full" 2 584 "int8(int8 stream)" `386 
f B "tx_buffer_bytes" 2 585 "int16()" `388 
v L "stream" 2 586 "int8" `390 
f G "tx_buffer_bytes" 2 586 "int16(int8 stream)" `389  "#use i2c() Prototypes:"
f B "i2c_read" 2 589 "int8()" `391 
v L "stream" 2 590 "int8" `393 
f G "i2c_read" 2 590 "int8(int8 stream)" `392 
v L "stream" 2 591 "int8" `395 
v L "ack" 2 591 "int8" `396 
f G "i2c_read" 2 591 "int8(int8 stream,int8 ack)" `394 
v L "data" 2 592 "int8" `398 
f B "i2c_write" 2 592 "int8(int8 data)" `397 
v L "stream" 2 593 "int8" `400 
v L "data" 2 593 "int8" `401 
f G "i2c_write" 2 593 "int8(int8 stream,int8 data)" `399 
f B "i2c_start" 2 594 "void()" `402 
v L "stream" 2 595 "int8" `404 
f G "i2c_start" 2 595 "void(int8 stream)" `403 
v L "stream" 2 596 "int8" `406 
v L "restart" 2 596 "int8" `407 
f G "i2c_start" 2 596 "void(int8 stream,int8 restart)" `405 
f B "i2c_stop" 2 597 "void()" `408 
v L "stream" 2 598 "int8" `410 
f G "i2c_stop" 2 598 "void(int8 stream)" `409 
f B "i2c_isr_state" 2 599 "int8()" `411 
v L "addr" 2 600 "int8" `413 
f B "i2c_slaveaddr" 2 600 "void(int8 addr)" `412 
v L "stream" 2 601 "int8" `415 
v L "addr" 2 601 "int8" `416 
f G "i2c_slaveaddr" 2 601 "void(int8 stream,int8 addr)" `414 
f B "i2c_poll" 2 602 "int8()" `417 
v L "stream" 2 603 "int8" `419 
f G "i2c_poll" 2 603 "int8(int8 stream)" `418 
v L "baud" 2 604 "int32" `421 
f B "i2c_init" 2 604 "void(int32 baud)" `420 
v L "stream" 2 605 "int8" `423 
v L "baud" 2 605 "int32" `424 
f G "i2c_init" 2 605 "void(int8 stream,int32 baud)" `422  "#use spi() Prototypes:"
f B "spi_xfer" 2 608 "int8()" `425 
f G "spi_xfer" 2 609 "int16()" `426 
f G "spi_xfer" 2 610 "int32()" `427 
v L "data" 2 611 "int8" `429 
f G "spi_xfer" 2 611 "int8(int8 data)" `428 
v L "data" 2 612 "int16" `431 
f G "spi_xfer" 2 612 "int16(int16 data)" `430 
v L "data" 2 613 "int32" `433 
f G "spi_xfer" 2 613 "int32(int32 data)" `432 
v L "stream" 2 614 "int8" `435 
v L "data" 2 614 "int8" `436 
f G "spi_xfer" 2 614 "int8(int8 stream,int8 data)" `434 
v L "stream" 2 615 "int8" `435 
v L "data" 2 615 "int16" `439 
f G "spi_xfer" 2 615 "int16(int8 stream,int16 data)" `437 
v L "stream" 2 616 "int8" `435 
v L "data" 2 616 "int32" `442 
f G "spi_xfer" 2 616 "int32(int8 stream,int32 data)" `440 
v L "stream" 2 617 "int8" `444 
v L "data" 2 617 "int8" `445 
v L "bits" 2 617 "int8" `446 
f G "spi_xfer" 2 617 "int8(int8 stream,int8 data,int8 bits)" `443 
v L "stream" 2 618 "int8" `444 
v L "data" 2 618 "int16" `445 
v L "bits" 2 618 "int8" `450 
f G "spi_xfer" 2 618 "int16(int8 stream,int16 data,int8 bits)" `447 
v L "stream" 2 619 "int8" `444 
v L "data" 2 619 "int32" `445 
v L "bits" 2 619 "int8" `454 
f G "spi_xfer" 2 619 "int32(int8 stream,int32 data,int8 bits)" `451 
v L "baud" 2 620 "int32" `456 
f B "spi_init" 2 620 "void(int32 baud)" `455 
v L "stream" 2 621 "int8" `458 
v L "baud" 2 621 "int32" `459 
f G "spi_init" 2 621 "void(int8 stream,int32 baud)" `457 
v L "baud" 2 622 "int32" `461 
f B "spi_speed" 2 622 "void(int32 baud)" `460 
v L "stream" 2 623 "int8" `463 
v L "baud" 2 623 "int32" `464 
f G "spi_speed" 2 623 "void(int8 stream,int32 baud)" `462 
v L "stream" 2 624 "int8" `466 
v L "baud" 2 624 "int32" `467 
v L "clock" 2 624 "int32" `468 
f G "spi_speed" 2 624 "void(int8 stream,int32 baud,int32 clock)" `465 
v L "data" 2 625 "int8" `470 
f B "spi_prewrite" 2 625 "void(int8 data)" `469 
v L "data" 2 626 "int16" `472 
f G "spi_prewrite" 2 626 "void(int16 data)" `471 
v L "data" 2 627 "int32" `474 
f G "spi_prewrite" 2 627 "void(int32 data)" `473 
v L "??65535" 2 628 "int8" `476 
v L "data" 2 628 "int8" `477 
f G "spi_prewrite" 2 628 "void(int8 ,int8 data)" `475 
v L "??65535" 2 629 "int8" `476 
v L "data" 2 629 "int16" `480 
f G "spi_prewrite" 2 629 "void(int8 ,int16 data)" `478 
v L "??65535" 2 630 "int8" `476 
v L "data" 2 630 "int32" `483 
f G "spi_prewrite" 2 630 "void(int8 ,int32 data)" `481 
f B "spi_xfer_in" 2 631 "int8()" `484 
f G "spi_xfer_in" 2 632 "int16()" `485 
f G "spi_xfer_in" 2 633 "int32()" `486 
v L "bits" 2 634 "int8" `488 
f G "spi_xfer_in" 2 634 "int8(int8 bits)" `487 
v L "bits" 2 635 "int8" `490 
f G "spi_xfer_in" 2 635 "int16(int8 bits)" `489 
v L "bits" 2 636 "int8" `492 
f G "spi_xfer_in" 2 636 "int32(int8 bits)" `491 
v L "stream" 2 637 "int8" `494 
v L "bits" 2 637 "int8" `495 
f G "spi_xfer_in" 2 637 "int8(int8 stream,int8 bits)" `493 
v L "stream" 2 638 "int8" `494 
v L "bits" 2 638 "int8" `498 
f G "spi_xfer_in" 2 638 "int16(int8 stream,int8 bits)" `496 
v L "stream" 2 639 "int8" `494 
v L "bits" 2 639 "int8" `501 
f G "spi_xfer_in" 2 639 "int32(int8 stream,int8 bits)" `499  "#use rtos() Prototypes:"
f B "rtos_run" 2 642 "void()" `502 
f B "rtos_yield" 2 643 "void()" `503 
v L "task" 2 644 "int8" `505 
f B "rtos_enable" 2 644 "void(int8 task)" `504 
v L "task" 2 645 "int8" `507 
f B "rtos_disable" 2 645 "void(int8 task)" `506 
f B "rtos_terminate" 2 646 "void()" `508 
v L "flag" 2 647 "int8" `510 
f B "rtos_await" 2 647 "void(int8 flag)" `509 
v L "sem" 2 648 "int8" `512 
f B "rtos_wait" 2 648 "void(int8 sem)" `511 
v L "sem" 2 649 "int8" `514 
f B "rtos_signal" 2 649 "void(int8 sem)" `513 
v L "task" 2 650 "int8" `516 
v L "msg" 2 650 "int8" `517 
f B "rtos_msg_send" 2 650 "void(int8 task,int8 msg)" `515 
f B "rtos_msg_read" 2 651 "int8()" `518 
f B "rtos_msg_poll" 2 652 "int8()" `519 
v L "task" 2 653 "int8" `521 
f B "rtos_overrun" 2 653 "int8(int8 task)" `520 
v L "task" 2 654 "int8" `523 
v L "stat" 2 654 "*int8" `524 
f B "rtos_stats" 2 654 "void(int8 task,*int8 stat)" `522  "#use timer() Prototypes:"
f B "get_ticks" 2 657 "int8()" `525 
f G "get_ticks" 2 658 "int16()" `526 
f G "get_ticks" 2 659 "int32()" `527 
v L "stream" 2 660 "int8" `529 
f G "get_ticks" 2 660 "int8(int8 stream)" `528 
v L "stream" 2 661 "int8" `531 
f G "get_ticks" 2 661 "int16(int8 stream)" `530 
v L "stream" 2 662 "int8" `533 
f G "get_ticks" 2 662 "int32(int8 stream)" `532 
v L "value" 2 663 "int8" `535 
f B "set_ticks" 2 663 "void(int8 value)" `534 
v L "value" 2 664 "int16" `537 
f G "set_ticks" 2 664 "void(int16 value)" `536 
v L "value" 2 665 "int32" `539 
f G "set_ticks" 2 665 "void(int32 value)" `538 
v L "stream" 2 666 "int8" `541 
v L "value" 2 666 "int8" `542 
f G "set_ticks" 2 666 "void(int8 stream,int8 value)" `540 
v L "stream" 2 667 "int8" `541 
v L "value" 2 667 "int16" `545 
f G "set_ticks" 2 667 "void(int8 stream,int16 value)" `543 
v L "stream" 2 668 "int8" `541 
v L "value" 2 668 "int32" `548 
f G "set_ticks" 2 668 "void(int8 stream,int32 value)" `546  "#use pwm() Prototypes:"
f B "pwm_on" 2 671 "void()" `549 
v L "stream" 2 672 "int8" `551 
f G "pwm_on" 2 672 "void(int8 stream)" `550 
f B "pwm_off" 2 673 "void()" `552 
v L "stream" 2 674 "int8" `554 
f G "pwm_off" 2 674 "void(int8 stream)" `553 
v L "duty" 2 675 "int16" `556 
f B "pwm_set_duty" 2 675 "void(int16 duty)" `555 
v L "stream" 2 676 "int8" `558 
v L "duty" 2 676 "int16" `559 
f G "pwm_set_duty" 2 676 "void(int8 stream,int16 duty)" `557 
v L "percent" 2 677 "int16" `561 
f B "pwm_set_duty_percent" 2 677 "void(int16 percent)" `560 
v L "stream" 2 678 "int8" `563 
v L "percent" 2 678 "int16" `564 
f G "pwm_set_duty_percent" 2 678 "void(int8 stream,int16 percent)" `562 
v L "frequency" 2 679 "int32" `566 
f B "pwm_set_frequency" 2 679 "void(int32 frequency)" `565 
v L "stream" 2 680 "int8" `568 
v L "frequency" 2 680 "int32" `569 
f G "pwm_set_frequency" 2 680 "void(int8 stream,int32 frequency)" `567  "#use capture() Prototypes:"
f B "get_capture_time" 2 683 "int16()" `570 
v L "stream" 2 684 "int8" `572 
f G "get_capture_time" 2 684 "int16(int8 stream)" `571 
f B "get_capture_event" 2 685 "int8()" `573 
v L "stream" 2 686 "int8" `575 
f G "get_capture_event" 2 686 "int8(int8 stream)" `574  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
v L "address" 2 699 "int16" `577 
f B "goto_address" 2 699 "void(int16 address)" `576 
v L "label" 2 700 "int16" `579 
f B "label_address" 2 700 "int16(int16 label)" `578  "Program Memory Prototypes:"
v L "address" 2 703 "int16" `581 
v L "dataptr" 2 703 "*int8" `582 
v L "count" 2 703 "int16" `583 
f B "read_program_memory" 2 703 "void(int16 address,*int8 dataptr,int16 count)" `580 
v L "address" 2 704 "int16" `585 
f B "read_program_eeprom" 2 704 "int16(int16 address)" `584 
v L "address" 2 705 "int16" `587 
f B "erase_program_eeprom" 2 705 "void(int16 address)" `586 
v L "address" 2 706 "int16" `589 
v L "dataptr" 2 706 "*int8" `590 
v L "count" 2 706 "int16" `591 
f B "write_program_memory" 2 706 "void(int16 address,*int8 dataptr,int16 count)" `588 
v L "address" 2 707 "int16" `593 
v L "data" 2 707 "int16" `594 
f B "write_program_eeprom" 2 707 "void(int16 address,int16 data)" `592  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 712 "int16" `595 
v L "address" 2 717 "__EEADDRESS__" `597 
f B "read_eeprom" 2 717 "int8(__EEADDRESS__ address)" `596 
v L "address" 2 718 "__EEADDRESS__" `599 
v L "value" 2 718 "int8" `600 
f B "write_eeprom" 2 718 "void(__EEADDRESS__ address,int8 value)" `598  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
v L "interrupt" 2 725 "int32" `602 
f B "enable_interrupts" 2 725 "void(int32 interrupt)" `601 
v L "interrupt" 2 726 "int32" `604 
f B "disable_interrupts" 2 726 "void(int32 interrupt)" `603 
v L "interrupt" 2 727 "int32" `606 
f B "clear_interrupt" 2 727 "void(int32 interrupt)" `605 
v L "interrupt" 2 728 "int32" `608 
f B "interrupt_active" 2 728 "int8(int32 interrupt)" `607 
v L "interrupt" 2 729 "int32" `610 
f B "interrupt_enabled" 2 729 "int8(int32 interrupt)" `609 
v L "source" 2 730 "int8" `612 
v L "edge" 2 730 "int8" `613 
f B "ext_int_edge" 2 730 "void(int8 source,int8 edge)" `611 
v L "address" 2 731 "int16" `615 
f B "jump_to_irs" 2 731 "void(int16 address)" `614  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 733 "0x40"
d G "H_TO_L" 2 734 "0"
d G "GLOBAL" 2 736 "0x0BC0"
d G "PERIPH" 2 737 "0x0B40"
d G "INT_RTCC" 2 738 "0x000B20"
d G "INT_RB" 2 739 "0x01FF0B08"
d G "INT_EXT_L2H" 2 740 "0x50000B10"
d G "INT_EXT_H2L" 2 741 "0x60000B10"
d G "INT_EXT" 2 742 "0x000B10"
d G "INT_AD" 2 743 "0x008C40"
d G "INT_TBE" 2 744 "0x008C10"
d G "INT_RDA" 2 745 "0x008C20"
d G "INT_TIMER1" 2 746 "0x008C01"
d G "INT_TIMER2" 2 747 "0x008C02"
d G "INT_CCP1" 2 748 "0x008C04"
d G "INT_CCP2" 2 749 "0x008D01"
d G "INT_SSP" 2 750 "0x008C08"
d G "INT_BUSCOL" 2 751 "0x008D08"
d G "INT_EEPROM" 2 752 "0x008D10"
d G "INT_TIMER0" 2 753 "0x000B20"
d G "INT_OSC_FAIL" 2 754 "0x008D80"
d G "INT_COMP" 2 755 "0x008D20"
d G "INT_COMP2" 2 756 "0x008D40"
d G "INT_ULPWU" 2 757 "0x008D04"
d G "INT_RB0" 2 758 "0x1010B08"
d G "INT_RB1" 2 759 "0x1020B08"
d G "INT_RB2" 2 760 "0x1040B08"
d G "INT_RB3" 2 761 "0x1080B08"
d G "INT_RB4" 2 762 "0x1100B08"
d G "INT_RB5" 2 763 "0x1200B08"
d G "INT_RB6" 2 764 "0x1400B08"
d G "INT_RB7" 2 765 "0x1800B08"
D G "_STRING" 3 12 ""
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "jump_to_irs" 3 19 10 "FUNCTION"
V L "s1" 3 34 "*int8" `617 
V L "s2" 3 34 "*int8" `618 
V L "n" 3 34 "int16" `619 
F G "memmove" 3 35 "*int8(*int8 s1,*int8 s2,int16 n)" `616 
V L "sc1" 3 36 "*int8" `620 
V L "sc2" 3 37 "*int8" `621 
D G "strcopy" 3 54 "strcpy"
C L "strncpy" 3 19 4 "FUNCTION"
V L "s1" 3 61 "*int8" `623 
V L "s2" 3 61 "*int8" `624 
V L "n" 3 61 "int16" `625 
F G "strncpy" 3 62 "*int8(*int8 s1,*int8 s2,int16 n)" `622 
V L "s" 3 63 "*int8" `626 
C L "strcat" 3 19 3 "FUNCTION"
V L "s1" 3 78 "*int8" `628 
V L "s2" 3 78 "*int8" `629 
F G "strcat" 3 79 "*int8(*int8 s1,*int8 s2)" `627 
V L "s" 3 80 "*int8" `630 
C L "strncat" 3 19 2 "FUNCTION"
V L "s1" 3 96 "*int8" `632 
V L "s2" 3 96 "*int8" `633 
V L "n" 3 96 "int16" `634 
F G "strncat" 3 97 "*int8(*int8 s1,*int8 s2,int16 n)" `631 
V L "s" 3 98 "*int8" `635 
C L "memcmp" 3 19 3 "FUNCTION"
V L "s1" 3 120 "*int8" `637 
V L "s2" 3 120 "*int8" `638 
V L "n" 3 120 "int16" `639 
F G "memcmp" 3 121 "sint8(*int8 s1,*int8 s2,int16 n)" `636 
V L "su1" 3 122 "*int8" `640 
V L "su2" 3 122 "*int8" `641 
C L "strcmp" 3 19 2 "FUNCTION"
V L "s1" 3 134 "*int8" `643 
V L "s2" 3 134 "*int8" `644 
F G "strcmp" 3 135 "sint8(*int8 s1,*int8 s2)" `642 
C L "strcoll" 3 19 2 "FUNCTION"
V L "s1" 3 144 "*int8" `646 
V L "s2" 3 144 "*int8" `647 
F G "strcoll" 3 145 "sint8(*int8 s1,*int8 s2)" `645 
C L "strncmp" 3 19 4 "FUNCTION"
V L "s1" 3 157 "*int8" `649 
V L "s2" 3 157 "*int8" `650 
V L "n" 3 157 "int16" `651 
F G "strncmp" 3 158 "sint8(*int8 s1,*int8 s2,int16 n)" `648 
C L "strxfrm" 3 19 3 "FUNCTION"
V L "s1" 3 169 "*int8" `653 
V L "s2" 3 169 "*int8" `654 
V L "n" 3 169 "int16" `655 
F G "strxfrm" 3 170 "int16(*int8 s1,*int8 s2,int16 n)" `652 
V L "s" 3 171 "*int8" `656 
V L "n1" 3 172 "int8" `657 
C L "memchr" 3 19 3 "FUNCTION"
V L "s" 3 191 "*int8" `659 
V L "c" 3 191 "int8" `660 
V L "n" 3 191 "int16" `661 
F G "memchr" 3 192 "*int8(*int8 s,int8 c,int16 n)" `658 
V L "uc" 3 193 "int8" `662 
V L "su" 3 194 "*int8" `663 
C L "strchr" 3 19 2 "FUNCTION"
V L "s" 3 205 "*int8" `665 
V L "c" 3 205 "int8" `666 
F G "strchr" 3 206 "*int8(*int8 s,int8 c)" `664 
C L "strcspn" 3 19 4 "FUNCTION"
V L "s1" 3 217 "*int8" `668 
V L "s2" 3 217 "*int8" `669 
F G "strcspn" 3 218 "int8(*int8 s1,*int8 s2)" `667 
V L "sc1" 3 219 "*int8" `670 
V L "sc2" 3 219 "*int8" `671 
C L "strpbrk" 3 19 4 "FUNCTION"
V L "s1" 3 232 "*int8" `673 
V L "s2" 3 232 "*int8" `674 
F G "strpbrk" 3 233 "*int8(*int8 s1,*int8 s2)" `672 
V L "sc1" 3 234 "*int8" `675 
V L "sc2" 3 234 "*int8" `676 
C L "strrchr" 3 19 2 "FUNCTION"
V L "s" 3 247 "*int8" `678 
V L "c" 3 247 "int8" `679 
F G "strrchr" 3 248 "*int8(*int8 s,int8 c)" `677 
V L "p" 3 249 "*int8" `680 
C L "strspn" 3 19 2 "FUNCTION"
V L "s1" 3 262 "*int8" `682 
V L "s2" 3 262 "*int8" `683 
F G "strspn" 3 263 "int8(*int8 s1,*int8 s2)" `681 
V L "sc1" 3 264 "*int8" `684 
V L "sc2" 3 264 "*int8" `685 
C L "strstr" 3 19 6 "FUNCTION"
V L "s1" 3 281 "*int8" `687 
V L "s2" 3 281 "*int8" `688 
F G "strstr" 3 282 "*int8(*int8 s1,*int8 s2)" `686 
V L "s" 3 283 "*int8" `689 
V L "t" 3 283 "*int8" `690 
C L "strtok" 3 19 13 "FUNCTION"
V L "s1" 3 320 "*int8" `692 
V L "s2" 3 320 "*int8" `693 
F G "strtok" 3 321 "*int8(*int8 s1,*int8 s2)" `691 
V L "beg" 3 322 "*int8" `694 
V L "end" 3 322 "*int8" `695 
V L "save" 3 323 "*int8" `696 
C L "strlen" 3 19 6 "FUNCTION"
V L "s" 3 369 "*int8" `698 
F G "strlen" 3 370 "int8(*int8 s)" `697 
V L "sc" 3 371 "*int8" `699 
C L "stricmp" 3 19 2 "FUNCTION"
V L "s1" 3 380 "*int8" `701 
V L "s2" 3 380 "*int8" `702 
F G "stricmp" 3 381 "sint8(*int8 s1,*int8 s2)" `700 
C L "strlwr" 3 19 3 "FUNCTION"
V L "s" 3 394 "*int8" `706 
F G "strlwr" 3 395 "*int8(*int8 s)" `705 
V L "p" 3 396 "*int8" `707 
C L "strupr" 3 19 3 "FUNCTION"
V L "s" 3 408 "*int8" `709 
F G "strupr" 3 409 "*int8(*int8 s)" `708 
V L "p" 3 410 "*int8" `710 
D G "_STDLIB" 6 12 ""
D G "RAND_MAX" 6 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 6 25 "1"
T G "div_t" 6 33 "{sint8 quot,sint8 rem}" `714 
T G "ldiv_t" 6 38 "{sint16 quot,sint16 rem}" `718  "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "atoi" 4 3 6 "FUNCTION"
C L "atoi" 6 43 2 "FUNCTION"
C L "atoi" 6 46 1 "*"
C L "atoi" 6 46 1 "*"
V L "s" 6 50 "*int8" `720 
f G "atoi" 6 50 "sint8(*int8 s)" `719  "Syntax: signed int32  atoi32(char * s)"
V L "s" 6 58 "*int8" `722 
f G "atoi32" 6 58 "sint32(*int8 s)" `721  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 6 46 2 "FUNCTION"
V L "num" 6 79 "sint32" `724 
V L "base" 6 79 "int8" `725 
V L "s" 6 79 "*int8" `726 
f G "itoa" 6 79 "*int8(sint32 num,int8 base,*int8 s)" `723  "Standard template: signed int16  atol(char * s)"
C L "itoa" 6 81 1 "*"
C L "itoa" 6 81 1 "*"
V L "s" 6 85 "*int8" `728 
f G "atol" 6 85 "sint16(*int8 s)" `727  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 6 87 1 "*"
C L "atol" 6 87 1 "*"
C L "atol" 6 87 1 "*"
C L "atol" 6 87 1 "*"
V L "s" 6 93 "*int8" `730 
V L "endptr" 6 93 "*int8" `731 
V L "base" 6 93 "sint8" `732 
f G "strtol" 6 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `729  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 6 95 1 "*"
C L "strtol" 6 95 1 "*"
C L "strtol" 6 95 1 "*"
C L "strtol" 6 95 1 "*"
V L "s" 6 101 "*int8" `734 
V L "endptr" 6 101 "*int8" `735 
V L "base" 6 101 "sint8" `736 
f G "strtoul" 6 101 "int16(*int8 s,*int8 endptr,sint8 base)" `733  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 6 95 2 "FUNCTION"
C L "strtoul" 6 103 1 "*"
C L "strtoul" 6 103 1 "*"
C L "strtoul" 6 103 1 "*"
V L "s" 6 110 "*int8" `738 
V L "endptr" 6 110 "*int8" `739 
f G "strtof" 6 110 "float(*int8 s,*int8 endptr)" `737  "provided for compatibility"
D G "strtof48" 6 116 "(s, e) strtof(s, e)"
D G "strtod" 6 117 "(s, e) strtof(s, e)"
C L "strtof" 6 103 1 "FUNCTION"
C L "strtof" 6 120 1 "*"
D G "atof" 6 124 "(s)   strtof(s, 0)"
C L "strtof" 6 120 1 "FUNCTION"
C L "strtof" 6 143 1 "*"
C L "strtof" 6 143 1 "*"
C L "strtof" 6 143 1 "*"
V L "s" 6 149 "*int8" `741 
f G "atoe" 6 149 "float(*int8 s)" `740  "Pseudo-random sequence generation functions"
C L "atoe" 6 143 1 "FUNCTION"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
f G "rand" 6 169 "int16()" `742  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
V L "seed" 6 191 "int32" `744 
f G "srand" 6 191 "void(int32 seed)" `743  "Memory management functions"
C L "srand" 6 171 3 "FUNCTION"
V L "string" 6 205 "*int8" `746 
f G "system" 6 205 "sint8(*int8 string)" `745  "Searching and sorting utilities"
C L "system" 6 171 1 "FUNCTION"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 4 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
D G "labs" 6 249 "abs"
V L "numer" 6 251 "sint8" `748 
V L "denom" 6 251 "sint8" `749 
f G "div" 6 251 "div_t(sint8 numer,sint8 denom)" `747 
V L "numer" 6 252 "sint16" `751 
V L "denom" 6 252 "sint16" `752 
f G "ldiv" 6 252 "ldiv_t(sint16 numer,sint16 denom)" `750  "Multibyte character functions"
C L "ldiv" 6 229 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
C L "ldiv" 7 2 7 "FUNCTION"
V L "numer" 6 274 "sint8" `748 
V L "denom" 6 274 "sint8" `755 
F G "div" 6 275 "div_t(sint8 numer,sint8 denom)" `747 
V L "val" 6 276 "div_t" `753 
V L "numer" 6 282 "sint16" `751 
V L "denom" 6 282 "sint16" `762 
F G "ldiv" 6 283 "ldiv_t(sint16 numer,sint16 denom)" `750 
V L "val" 6 284 "ldiv_t" `760 
V L "s" 6 361 "*int8" `768 
F G "atoe" 6 362 "float(*int8 s)" `740 
V L "pow10" 6 363 "float" `767 
V L "result" 6 364 "float" `768 
V L "sign" 6 365 "int8" `769 
V L "expsign" 6 366 "int8" `770 
V L "c" 6 367 "int8" `771 
V L "ptr" 6 368 "int8" `772 
V L "i" 6 369 "int8" `773 
V L "exp" 6 370 "float" `774 
V L "expcnt" 6 371 "int8" `775 
C L "atoe" 6 397 1 "FUNCTION"
V L "s" 6 429 "*int8" `788 
F G "atoi" 6 430 "sint8(*int8 s)" `719 
V L "result" 6 431 "sint8" `787 
V L "sign" 6 432 "int8" `788 
V L "base" 6 432 "int8" `789 
V L "index" 6 432 "int8" `790 
V L "c" 6 433 "int8" `791 
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
V L "s" 6 498 "*int8" `793 
F G "atol" 6 499 "sint16(*int8 s)" `727 
V L "result" 6 500 "sint16" `792 
V L "sign" 6 501 "int8" `793 
V L "base" 6 501 "int8" `794 
V L "index" 6 501 "int8" `795 
V L "c" 6 502 "int8" `796 
C L "atol" 6 397 1 "FUNCTION"
C L "atol" 6 397 1 "FUNCTION"
C L "atol" 6 397 1 "FUNCTION"
C L "atol" 6 397 1 "FUNCTION"
C L "mult_with10" 6 397 1 "FUNCTION"
V L "num" 6 565 "int32" `798 
F G "mult_with10" 6 566 "sint32(int32 num)" `797 
V L "s" 6 571 "*int8" `800 
F G "atoi32" 6 572 "sint32(*int8 s)" `721 
V L "result" 6 573 "sint32" `799 
V L "sign" 6 574 "int8" `800 
V L "base" 6 574 "int8" `801 
V L "index" 6 574 "int8" `802 
V L "c" 6 575 "int8" `803 
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
V L "num" 6 770 "sint32" `724 
V L "base" 6 770 "int8" `725 
V L "s" 6 770 "*int8" `807 
F G "itoa" 6 771 "*int8(sint32 num,int8 base,*int8 s)" `723 
V L "temp" 6 772 "int32" `804 
V L "i" 6 773 "int8" `805 
V L "sign" 6 773 "int8" `806 
V L "cnt" 6 773 "int8" `807 
V L "c" 6 774 "int8" `808 
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
V L "s" 6 885 "*int8" `738 
V L "endptr" 6 885 "*int8" `817 
F G "strtof" 6 886 "float(*int8 s,*int8 endptr)" `737 
V L "pow10" 6 887 "float" `815 
V L "result" 6 888 "float" `816 
V L "skip" 6 889 "int1" `817 
V L "sign" 6 889 "int1" `818 
V L "point" 6 889 "int1" `819 
V L "c" 6 890 "int8" `820 
V L "ptr" 6 891 "int8" `821 
V L "s" 6 1103 "*int8" `734 
V L "endptr" 6 1103 "*int8" `735 
V L "base" 6 1103 "sint8" `826 
F G "strtoul" 6 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `733 
V L "sc" 6 1105 "*int8" `823 
V L "s1" 6 1105 "*int8" `824 
V L "sd" 6 1105 "*int8" `825 
V L "x" 6 1106 "int16" `826 
V L "sign" 6 1107 "int8" `827 
V L "digits" 6 1108 "int8[1]" `828 
C L "strtoul" 6 397 1 "FUNCTION"
C L "strtoul" 6 397 1 "FUNCTION"
C L "strtoul" 6 397 1 "FUNCTION"
V L "s" 6 1165 "*int8" `730 
V L "endptr" 6 1165 "*int8" `731 
V L "base" 6 1165 "sint8" `833 
F G "strtol" 6 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `729 
V L "sc" 6 1167 "*int8" `830 
V L "s1" 6 1167 "*int8" `831 
V L "sd" 6 1167 "*int8" `832 
V L "x" 6 1168 "sint16" `833 
V L "sign" 6 1169 "int8" `834 
V L "digits" 6 1170 "int8[1]" `835 
C L "strtol" 6 397 1 "FUNCTION"
C L "strtol" 6 397 1 "FUNCTION"
C L "strtol" 6 397 1 "FUNCTION"
V L "string" 6 1228 "*int8" `838 
F G "system" 6 1229 "sint8(*int8 string)" `745 
V L "s" 6 1233 "*int8" `838 
V L "n" 6 1233 "int16" `839 
F G "mblen" 6 1234 "int8(*int8 s,int16 n)" `837 
V L "pwc" 6 1238 "*int8" `841 
V L "s" 6 1238 "*int8" `842 
V L "n" 6 1238 "int16" `843 
F G "mbtowc" 6 1239 "int8(*int8 pwc,*int8 s,int16 n)" `840 
V L "s" 6 1244 "*int8" `845 
V L "wchar" 6 1244 "int8" `846 
F G "wctomb" 6 1245 "int8(*int8 s,int8 wchar)" `844 
V L "pwcs" 6 1250 "*int8" `848 
V L "s" 6 1250 "*int8" `849 
V L "n" 6 1250 "int16" `850 
F G "mbstowcs" 6 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `847 
V L "s" 6 1256 "*int8" `852 
V L "pwcs" 6 1256 "*int8" `853 
V L "n" 6 1256 "int16" `854 
F G "wcstombs" 6 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `851 
V G "_Randseed" 6 1266 "int32" `855 
F G "rand" 6 1269 "int16()" `742 
V L "seed" 6 1274 "int32" `860 
F G "srand" 6 1275 "void(int32 seed)" `743 
V L "p1" 6 1284 "*int8" `860 
V L "p2" 6 1284 "*int8" `861 
T G "*_Cmpfun" 6 1284 "sint8(*int8 p1,*int8 p2)" `859 
V L "qdata" 6 1291 "*int8" `864 
V L "qitems" 6 1291 "int8" `865 
V L "qsize" 6 1291 "int8" `866 
V L "cmp" 6 1291 "_Cmpfun" `867 
F G "qsort" 6 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `863 
V L "m" 6 1292 "int8" `868 
V L "j" 6 1292 "int8" `869 
V L "i" 6 1292 "int8" `870 
V L "l" 6 1292 "int8" `871 
V L "done" 6 1293 "int1" `872 
V L "t" 6 1294 "int8[16]" `873 
V L "key" 6 1319 "*int8" `876 
V L "base" 6 1319 "*int8" `877 
V L "num" 6 1319 "int16" `878 
V L "width" 6 1319 "int16" `879 
V L "cmp" 6 1319 "_Cmpfun" `880 
F G "bsearch" 6 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `875 
V L "p" 6 1321 "*int8" `881 
V L "q" 6 1321 "*int8" `882 
V L "n" 6 1322 "int16" `883 
V L "pivot" 6 1323 "int16" `884 
V L "val" 6 1324 "sint8" `885 
C L "bsearch" 6 397 1 "FUNCTION"
D G "_STDIO" 8 12 ""
D G "MATH_H" 9 30 ""
D G "PI" 9 35 "3.1415926535897932"
D G "SQRT2" 9 38 "1.4142135623730950"
C L "CEIL_FLOOR" 9 2 3 "FUNCTION"
V L "x" 9 45 "float" `890 
V L "n" 9 45 "int8" `891 
F G "CEIL_FLOOR" 9 46 "float(float x,int8 n)" `889 
V L "y" 9 47 "float" `892 
V L "res" 9 47 "float" `893 
V L "l" 9 48 "int16" `894 
V L "s" 9 49 "int1" `895 
C L "floor" 9 2 5 "FUNCTION"
V L "x" 9 207 "float" `902 
F G "floor" 9 208 "float(float x)" `901 
C L "ceil" 9 2 5 "FUNCTION"
V L "x" 9 233 "float" `904 
F G "ceil" 9 234 "float(float x)" `903 
D G "fabs" 9 259 "abs"
C L "fmod" 9 2 6 "FUNCTION"
V L "x" 9 271 "float" `906 
V L "y" 9 271 "float" `907 
F G "fmod" 9 272 "float(float x,float y)" `905 
V L "i" 9 273 "float" `908 
D G "LN2" 9 334 "0.6931471805599453"
D G "LN2_INV" 9 335 "1.4426950408889634073"
V G "pe" 9 337 "[6]" `909 
V L "x" 9 341 "float" `913 
F G "exp" 9 342 "float(float x)" `912 
V L "y" 9 343 "float" `914 
V L "res" 9 343 "float" `915 
V L "r" 9 343 "float" `916 
V L "n" 9 347 "sint8" `917 
V L "s" 9 348 "int1" `918 
C L "exp" 9 2 1 "FUNCTION"
V G "pl" 9 525 "[4]" `921 
V G "ql" 9 526 "[4]" `924 
C L "log" 9 2 3 "FUNCTION"
V L "x" 9 534 "float" `928 
F G "log" 9 535 "float(float x)" `927 
V L "y" 9 536 "float" `929 
V L "res" 9 536 "float" `930 
V L "r" 9 536 "float" `931 
V L "y2" 9 536 "float" `932 
V L "n" 9 540 "sint8" `933 
C L "log" 9 2 1 "FUNCTION"
D G "LN10" 9 758 "2.3025850929940456"
D G "LN10_INV" 9 759 "0.4342944819032518276"
C L "log10" 9 2 3 "FUNCTION"
V L "x" 9 767 "float" `935 
F G "log10" 9 768 "float(float x)" `934 
V L "r" 9 769 "float" `936 
C L "modf" 9 2 8 "FUNCTION"
V L "value" 9 808 "float" `938 
V L "iptr" 9 808 "*float" `939 
F G "modf" 9 809 "float(float value,*float iptr)" `937 
C L "pwr" 9 2 6 "FUNCTION"
V L "x" 9 836 "float" `941 
V L "y" 9 836 "float" `942 
F G "pwr" 9 837 "float(float x,float y)" `940 
C L "pow" 9 2 7 "FUNCTION"
V L "x" 9 899 "float" `944 
V L "y" 9 899 "float" `945 
F G "pow" 9 900 "float(float x,float y)" `943 
C L "sqrt" 9 2 5 "FUNCTION"
V L "x" 9 960 "float" `947 
F G "sqrt" 9 961 "float(float x)" `946 
V L "y" 9 962 "float" `948 
V L "res" 9 962 "float" `949 
V L "p" 9 966 "*int8" `950 
D G "PI_DIV_BY_TWO_INV" 9 1155 "0.63661977236758134"
D G "PI_DIV_BY_TWO" 9 1159 "1.5707963267948966"
D G "TWOBYPI" 9 1163 "0.6366197723675813"
C L "cos" 9 2 3 "FUNCTION"
V L "x" 9 1171 "float" `952 
F G "cos" 9 1172 "float(float x)" `951 
V L "y" 9 1173 "float" `953 
V L "t" 9 1173 "float" `954 
V L "t2" 9 1173 "float" `955 
V L "quad" 9 1174 "int8" `956 
V L "i" 9 1174 "int8" `957 
V L "frac" 9 1175 "float" `958 
V L "p" 9 1176 "float[5]" `959  "by the series definition for cosine"
C L "cos" 9 2 1 "FUNCTION"
C L "cos" 9 2 2 "FUNCTION"
C L "cos" 9 2 1 "FUNCTION"
C L "cos" 9 2 1 "FUNCTION"
C L "cos" 9 2 1 "FUNCTION"
C L "cos" 9 2 1 "FUNCTION"
C L "cos" 9 2 1 "FUNCTION"
C L "cos" 9 2 1 "FUNCTION"
C L "sin" 9 2 5 "FUNCTION"
V L "x" 9 1312 "float" `961 
F G "sin" 9 1313 "float(float x)" `960 
C L "tan" 9 2 5 "FUNCTION"
V L "x" 9 1338 "float" `963 
F G "tan" 9 1339 "float(float x)" `962 
V L "c" 9 1340 "float" `964 
V L "s" 9 1340 "float" `965 
V G "pas" 9 1378 "[3]" `966 
V G "qas" 9 1379 "[3]" `969 
V L "x" 9 1381 "float" `973 
V L "n" 9 1381 "int8" `974 
F G "ASIN_COS" 9 1382 "float(float x,int8 n)" `972 
V L "y" 9 1383 "float" `975 
V L "res" 9 1383 "float" `976 
V L "r" 9 1383 "float" `977 
V L "y2" 9 1383 "float" `978 
V L "s" 9 1384 "int1" `979 
C L "ASIN_COS" 9 2 1 "FUNCTION"
C L "ASIN_COS" 9 2 1 "FUNCTION"
C L "asin" 9 2 5 "FUNCTION"
V L "x" 9 1539 "float" `981 
F G "asin" 9 1540 "float(float x)" `980 
V L "r" 9 1541 "float" `982 
C L "acos" 9 2 5 "FUNCTION"
V L "x" 9 1573 "float" `984 
F G "acos" 9 1574 "float(float x)" `983 
V L "r" 9 1575 "float" `985 
V G "pat" 9 1601 "[4]" `986 
V G "qat" 9 1602 "[4]" `989 
C L "atan" 9 2 3 "FUNCTION"
V L "x" 9 1610 "float" `993 
F G "atan" 9 1611 "float(float x)" `992 
V L "y" 9 1612 "float" `994 
V L "res" 9 1612 "float" `995 
V L "r" 9 1612 "float" `996 
V L "s" 9 1613 "int1" `997 
V L "flag" 9 1613 "int1" `998 
C L "atan" 9 2 1 "FUNCTION"
C L "atan2" 9 2 7 "FUNCTION"
V L "y" 9 1753 "float" `1000 
V L "x" 9 1753 "float" `1001 
F G "atan2" 9 1754 "float(float y,float x)" `999 
V L "z" 9 1755 "float" `1002 
V L "sign" 9 1756 "int1" `1003 
V L "quad" 9 1757 "int8" `1004 
C L "atan2" 9 2 1 "FUNCTION"
C L "atan2" 9 2 1 "FUNCTION"
C L "cosh" 9 2 7 "FUNCTION"
V L "x" 9 1975 "float" `1007 
F G "cosh" 9 1976 "float(float x)" `1006 
C L "sinh" 9 2 6 "FUNCTION"
V L "x" 9 2002 "float" `1009 
F G "sinh" 9 2003 "float(float x)" `1008 
C L "tanh" 9 2 6 "FUNCTION"
V L "x" 9 2032 "float" `1011 
F G "tanh" 9 2033 "float(float x)" `1010 
D G "LOG2" 9 2062 ".30102999566398119521"
D G "LOG2_INV" 9 2063 "3.32192809488736234787"
V L "x" 9 2064 "float" `1013 
V L "exp" 9 2064 "*sint8" `1014 
F G "frexp" 9 2065 "float(float x,*sint8 exp)" `1012 
V L "res" 9 2066 "float" `1015 
V L "sign" 9 2067 "int1" `1016 
C L "ldexp" 9 2 6 "FUNCTION"
V L "value" 9 2209 "float" `1018 
V L "exp" 9 2209 "sint8" `1019 
F G "ldexp" 9 2210 "float(float value,sint8 exp)" `1017 
D G "DS" 10 2 "PIN_D1"
D G "SH_CP" 10 3 "PIN_D0"
D G "STCP" 10 4 "PIN_D2"
V L "BYTEXUAT" 10 5 "int8" `1021 
F G "XUATTRANGTHAI" 10 6 "void(int8 BYTEXUAT)" `1020 
V L "SB" 10 7 "int8" `1022 
C L "XUATTRANGTHAI" 10 14 1 "FUNCTION"
D G "BT1_PIN" 1 11 "PIN_B1"
D G "BT2_PIN" 1 12 "PIN_B2"
D G "BT3_PIN" 1 13 "PIN_B3"
D G "LCD_ENABLE_PIN" 1 14 "PIN_E0"
D G "LCD_RS_PIN" 1 15 "PIN_E1"
D G "LCD_RW_PIN" 1 16 "PIN_E2"
D G "LCD_DATA4" 1 17 "PIN_C0"
D G "LCD_DATA5" 1 18 "PIN_C1"
D G "LCD_DATA6" 1 19 "PIN_C2"
D G "LCD_DATA7" 1 20 "PIN_C3"
D G "__LCD_C__" 11 76 ""
T G "LCD_PIN_MAP" 11 90 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `1037  "this is to improve compatability with previous LCD drivers that accepted"
D G "lcd_output_enable" 11 112 "(x) output_bit(LCD_ENABLE_PIN, x)"
D G "lcd_enable_tris" 11 113 "()  output_drive(LCD_ENABLE_PIN)"
D G "lcd_output_rs" 11 120 "(x) output_bit(LCD_RS_PIN, x)"
D G "lcd_rs_tris" 11 121 "()  output_drive(LCD_RS_PIN)"
D G "lcd_output_rw" 11 128 "(x) output_bit(LCD_RW_PIN, x)"
D G "lcd_rw_tris" 11 129 "()  output_drive(LCD_RW_PIN)"
D G "LCD_TYPE" 11 179 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 11 183 "0x40" "LCD RAM address for the second line"
D G "LCD_LINE_LENGTH" 11 187 "20"
f G "lcd_read_nibble" 11 190 "int8()" `1038 
F G "lcd_read_byte" 11 193 "int8()" `1039 
V L "low" 11 194 "int8" `1040 
V L "high" 11 194 "int8" `1041 
F G "lcd_read_nibble" 11 240 "int8()" `1038 
V L "n" 11 242 "int8" `1043 
C L "lcd_read_nibble" 11 2 1 "FUNCTION"
V L "n" 11 256 "int8" `1045 
F G "lcd_send_nibble" 11 257 "void(int8 n)" `1044 
C L "lcd_send_nibble" 11 2 1 "FUNCTION"
V L "address" 11 274 "int8" `1047 
V L "n" 11 274 "int8" `1048 
F G "lcd_send_byte" 11 275 "void(int8 address,int8 n)" `1046 
F G "lcd_init" 11 300 "void()" `1049 
V L "i" 11 301 "int8" `1050 
V L "LCD_INIT_STRING" 11 302 "int8[4]" `1051 
C L "lcd_init" 11 2 2 "FUNCTION"
V L "x" 11 345 "int8" `1053 
V L "y" 11 345 "int8" `1054 
F G "lcd_gotoxy" 11 346 "void(int8 x,int8 y)" `1052 
V L "address" 11 347 "int8" `1055 
V L "c" 11 363 "int8" `1057 
F G "lcd_putc" 11 364 "void(int8 c)" `1056 
V L "x" 11 406 "int8" `1059 
V L "y" 11 406 "int8" `1060 
F G "lcd_getc" 11 407 "int8(int8 x,int8 y)" `1058 
V L "value" 11 408 "int8" `1061 
C L "lcd_getc" 11 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 11 2 5 "FUNCTION"
V L "which" 11 424 "int8" `1063 
V L "ptr" 11 424 "*int8" `1064 
F G "lcd_set_cgram_char" 11 425 "void(int8 which,*int8 ptr)" `1062 
V L "i" 11 426 "int8" `1065 
C L "lcd_set_cgram_char" 11 2 1 "FUNCTION"
V L "on" 11 443 "int8" `1067 
F G "lcd_cursor_on" 11 444 "void(int8 on)" `1066 
C L "lcd_cursor_on" 11 2 1 "FUNCTION"
C L "lcd_cursor_on" 11 2 1 "FUNCTION"
V G "CONFIG_FUN" 12 8 "int8" `1069 
V G "VT" 12 9 "int8" `1070 
V G "KYTU" 12 9 "int8" `1071 
V G "LENH_DIEU_KHIEN" 12 10 "int8" `1072 
V G "ID_GATEWAY" 12 11 "int8[6]" `1073 
V G "ID_NODE" 12 12 "int8[4]" `1074 
V G "LEN_PACKAGES" 12 13 "int8" `1075 
V G "LENHDIEUKHIEN" 12 14 "int8" `1076 
V G "DODAI_DATA_NHAN" 12 14 "int8" `1077 
V G "SOLUONGTHIETBI_CONFIG" 12 15 "int8" `1078 
V G "SOLUONGCAMBIEN_CONFIG" 12 15 "int8" `1079 
V G "SOSANH_IDNODE" 12 16 "sint8" `1080 
V G "SOSANH_IDGW" 12 16 "sint8" `1081 
V G "TT_THIETBI_TEMP" 12 18 "int1[8]" `1082 
V G "TTNHAN" 12 19 "int1" `1083 
V G "TT_CONFIG" 12 19 "int1" `1084 
V G "TT_CONTROL" 12 19 "int1" `1085 
V G "TT_CONFIG_DONE" 12 19 "int1" `1086 
V G "TT_FUN" 12 19 "int1" `1087 
V G "TT_STT" 12 19 "int1" `1088 
V G "TT_CONFIG_OKE_UART" 12 19 "int1" `1089 
V G "TT_SW" 12 19 "int1" `1090 
V G "TT_SEND_ANALOG" 12 19 "int1" `1091 
V G "ID_NODE_CHAR" 12 21 "*int8[1]" `1092 
V G "ID_GATEWAY_CHAR" 12 22 "*int8[1]" `1094 
V G "ID_NODE_NHAN" 12 23 "*int8[1]" `1096 
V G "ID_GW_NHAN" 12 24 "*int8[1]" `1098 
V G "KYTUCHAR" 12 25 "int8[50]" `1100 
V G "KYTUCHAR2" 12 26 "int8[25]" `1101 
V G "TEMP_CHAR" 12 28 "*int8[1]" `1102 
V G "TEMP_CHAR2" 12 29 "*int8[1]" `1104 
C L "READ_EEPROMP_DATA_NODE" 12 4 1 "FUNCTION"
C L "READ_EEPROMP_DATA_NODE" 1 26 1 "FUNCTION"
F G "READ_EEPROMP_DATA_NODE" 13 1 "void()" `1106 
V L "j" 13 2 "int8" `1107 
C L "CHON_ID" 13 12 1 "FUNCTION"
F G "CHON_ID" 13 14 "void()" `1108  "TT_CONFIG_DONE;"
V L "num" 13 18 "int8" `1109 
C L "CHON_ID" 13 12 2 "FUNCTION"
C L "CHON_ID" 13 12 1 "FUNCTION"
C L "CHON_ID" 13 12 1 "FUNCTION"
F G "NHAPID_GW" 13 55 "void()" `1120 
V L "num" 13 56 "int8" `1121 
C L "NHAPID_GW" 13 12 2 "FUNCTION"
C L "NHAPID_GW" 13 12 1 "FUNCTION"
C L "NHAPID_GW" 13 12 1 "FUNCTION"
F G "BUTT_OKE" 13 95 "void()" `1127 
C L "BUTT_OKE" 13 12 1 "FUNCTION"
C L "BUTT_OKE" 13 12 1 "FUNCTION"
F G "SELLECT_FUN" 13 102 "void()" `1128 
F G "BUTT_FUN" 13 118 "void()" `1129 
C L "BUTT_FUN" 13 12 1 "FUNCTION"
C L "BUTT_FUN" 13 12 1 "FUNCTION"
C L "BUTT_FUN" 13 12 1 "FUNCTION"
F G "XULY_IDNODE_NHAP" 13 161 "void()" `1134  "*TEMP_CHAR3 = "\0";"
V L "j" 13 164 "int8" `1136 
C L "XULY_IDNODE_NHAP" 13 12 3 "FUNCTION"
F G "XULY_IDGW_NHAP" 13 175 "void()" `1137 
V L "j" 13 178 "int8" `1139 
F G "CONFIG_DONE" 13 189 "void()" `1140 
V L "PACKAGE_CONFIG" 13 192 "*int8[1]" `1141 
C L "CONFIG_DONE" 13 12 4 "FUNCTION"
C L "CONFIG_DONE" 13 12 1 "FUNCTION"
V L "j" 13 213 "int8" `1143 
F G "XACNHANCONFIG" 13 231 "void()" `1148 
V L "TOKEN" 13 236 "*int8" `1150 
C L "READ_BTN_STATE" 13 12 1 "FUNCTION"
F G "READ_BTN_STATE" 14 2 "void()" `1154 
V L "TB" 14 4 "int8" `1155 
V L "ID_TB" 14 5 "int8" `1156 
C L "READ_BTN_STATE" 14 14 4 "FUNCTION"
F G "BIN_TO_DEC" 14 27 "int8()" `1164 
V L "DEC_VL" 14 28 "int8" `1165 
V L "base" 14 29 "int8" `1166 
V L "i" 14 30 "int8" `1167 
F G "XUAT_DIEU_KHIEN" 14 41 "void()" `1168 
V L "ST" 14 44 "int8" `1169 
C L "XUAT_DIEU_KHIEN" 14 14 1 "FUNCTION"
F G "DIEUKHIENTHIETBI" 14 75 "void()" `1182 
V L "MA_DEC" 14 76 "int8" `1183 
V L "SB" 14 79 "int8" `1184 
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 1 1 "*"
C G "" 16 11 1 "*"
C G "" 16 11 1 "*"
C G "" 16 11 1 "*"
C G "" 16 11 1 "*"
C G "" 16 11 1 "*"
D G "_TYPES_H" 16 24 ""
T G "bool" 16 48 "int1" `1186 
T G "sint8" 16 49 "sint8" `1187 
T G "sint16" 16 50 "sint16" `1188 
T G "sint32" 16 51 "sint32" `1189 
T G "uint8" 16 52 "int8" `1190 
T G "uint16" 16 53 "int16" `1191 
T G "uint32" 16 54 "int32" `1192  "(defined(__PCB__) || defined(__PCH__) || defined(__PCM__)) *"
D G "DS1820_DATAPIN" 15 2 "PIN_A0"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
C G "" 17 11 1 "*"
D G "_DS1820_H" 17 50 ""
D G "TEMP_RES" 17 59 "0x100" "temperature resolution => 1/256°C = 0.0039°C"
D G "DS1820_RST_PULSE" 17 66 "480" "master reset pulse time in [us]"
D G "DS1820_MSTR_BITSTART" 17 67 "2" "delay time for bit start by master"
D G "DS1820_PRESENCE_WAIT" 17 68 "40" "delay after master reset pulse in [us]"
D G "DS1820_PRESENCE_FIN" 17 69 "480" "dealy after reading of presence pulse [us]"
D G "DS1820_BITREAD_DLY" 17 70 "5" "bit read delay"
D G "DS1820_BITWRITE_DLY" 17 71 "100" "bit write delay"
D G "DS1820_REG_TEMPLSB" 17 78 "0"
D G "DS1820_REG_TEMPMSB" 17 79 "1"
D G "DS1820_REG_CNTREMAIN" 17 80 "6"
D G "DS1820_REG_CNTPERSEC" 17 81 "7"
D G "DS1820_SCRPADMEM_LEN" 17 82 "9" "length of scratchpad memory"
D G "DS1820_ADDR_LEN" 17 84 "8"
D G "DS1820_CMD_SEARCHROM" 17 91 "0xF0"
D G "DS1820_CMD_READROM" 17 92 "0x33"
D G "DS1820_CMD_MATCHROM" 17 93 "0x55"
D G "DS1820_CMD_SKIPROM" 17 94 "0xCC"
D G "DS1820_CMD_ALARMSEARCH" 17 95 "0xEC"
D G "DS1820_CMD_CONVERTTEMP" 17 96 "0x44"
D G "DS1820_CMD_WRITESCRPAD" 17 97 "0x4E"
D G "DS1820_CMD_READSCRPAD" 17 98 "0xBE"
D G "DS1820_CMD_COPYSCRPAD" 17 99 "0x48"
D G "DS1820_CMD_RECALLEE" 17 100 "0xB8"
D G "DS1820_FAMILY_CODE_DS18B20" 17 103 "0x28"
D G "DS1820_FAMILY_CODE_DS18S20" 17 104 "0x10"
V G "bDoneFlag" 17 111 "bool" `1193 
V G "nLastDiscrepancy_u8" 17 112 "uint8" `1194 
V G "nRomAddr_au8" 17 113 "uint8[8]" `1195  "-------------------------------------------------------------------------- *"
C G "" 17 122 1 "*"
C G "" 17 122 1 "*"
C G "" 17 122 1 "*"
C G "" 17 122 1 "*"
D G "DS1820_DelayUs" 17 130 "(dly_us)       delay_us(dly_us)"
C G "" 17 133 1 "*"
C G "" 17 133 1 "*"
C G "" 17 133 1 "*"
C G "" 17 133 1 "*"
D G "DS1820_DelayMs" 17 141 "(dly_ms)   delay_ms(dly_ms)"
C G "" 17 144 1 "*"
C G "" 17 144 1 "*"
C G "" 17 144 1 "*"
C G "" 17 144 1 "*"
D G "DS1820_DisableInterrupts" 17 155 "()"
C G "" 17 160 1 "*"
C G "" 17 160 1 "*"
C G "" 17 160 1 "*"
C G "" 17 160 1 "*"
D G "DS1820_EnableInterrupts" 17 171 "()"
C L "DS1820_Reset" 17 175 1 "*"
C L "DS1820_Reset" 17 175 1 "*"
C L "DS1820_Reset" 17 175 1 "*"
C L "DS1820_Reset" 17 175 1 "*"
C L "DS1820_Reset" 17 175 1 "*"
F G "DS1820_Reset" 17 184 "int8()" `1196 
V L "bPresPulse" 17 185 "bool" `1197  "reset pulse *"
C L "DS1820_Reset" 17 175 1 "FUNCTION"
C L "DS1820_Reset" 17 175 1 "FUNCTION"
C L "DS1820_ReadBit" 17 208 1 "*"
C L "DS1820_ReadBit" 17 208 1 "*"
C L "DS1820_ReadBit" 17 208 1 "*"
C L "DS1820_ReadBit" 17 208 1 "*"
C L "DS1820_ReadBit" 17 208 1 "*"
F G "DS1820_ReadBit" 17 217 "int8()" `1198 
V L "bBit" 17 218 "bool" `1199 
C L "DS1820_WriteBit" 17 235 1 "*"
C L "DS1820_WriteBit" 17 235 1 "*"
C L "DS1820_WriteBit" 17 235 1 "*"
C L "DS1820_WriteBit" 17 235 1 "*"
C L "DS1820_WriteBit" 17 235 1 "*"
V L "bBit" 17 243 "int8" `1201 
F G "DS1820_WriteBit" 17 244 "void(int8 bBit)" `1200 
C L "DS1820_ReadByte" 17 262 1 "*"
C L "DS1820_ReadByte" 17 262 1 "*"
C L "DS1820_ReadByte" 17 262 1 "*"
C L "DS1820_ReadByte" 17 262 1 "*"
C L "DS1820_ReadByte" 17 262 1 "*"
F G "DS1820_ReadByte" 17 271 "uint8()" `1202 
V L "i" 17 272 "uint8" `1203 
V L "value" 17 273 "uint8" `1204 
C L "DS1820_WriteByte" 17 287 1 "*"
C L "DS1820_WriteByte" 17 287 1 "*"
C L "DS1820_WriteByte" 17 287 1 "*"
C L "DS1820_WriteByte" 17 287 1 "*"
C L "DS1820_WriteByte" 17 287 1 "*"
V L "val_u8" 17 295 "uint8" `1206 
F G "DS1820_WriteByte" 17 296 "void(uint8 val_u8)" `1205 
V L "i" 17 297 "uint8" `1207 
V L "temp" 17 298 "uint8" `1208 
C L "DS1820_WriteByte" 17 287 1 "FUNCTION"
C L "DS1820_WriteByte" 17 287 1 "FUNCTION"
C L "DS1820_WriteByte" 17 287 1 "FUNCTION"
C L "DS1820_WriteByte" 17 287 1 "FUNCTION"
C L "DS1820_AddrDevice" 17 287 3 "FUNCTION"
C L "DS1820_AddrDevice" 17 317 1 "*"
C L "DS1820_AddrDevice" 17 317 1 "*"
C L "DS1820_AddrDevice" 17 317 1 "*"
C L "DS1820_AddrDevice" 17 317 1 "*"
C L "DS1820_AddrDevice" 17 317 1 "*"
C L "DS1820_AddrDevice" 17 317 1 "*"
V L "nAddrMethod" 17 326 "uint8" `1210 
F G "DS1820_AddrDevice" 17 327 "void(uint8 nAddrMethod)" `1209 
V L "i" 17 328 "uint8" `1211 
C L "DS1820_AddrDevice" 17 317 1 "FUNCTION"
C L "DS1820_AddrDevice" 17 317 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "*"
C L "DS1820_FindNextDevice" 17 345 1 "*"
C L "DS1820_FindNextDevice" 17 345 1 "*"
C L "DS1820_FindNextDevice" 17 345 1 "*"
C L "DS1820_FindNextDevice" 17 345 1 "*"
C L "DS1820_FindNextDevice" 17 345 1 "*"
F G "DS1820_FindNextDevice" 17 355 "int8()" `1212 
V L "state_u8" 17 356 "uint8" `1213 
V L "byteidx_u8" 17 357 "uint8" `1214 
V L "mask_u8" 17 358 "uint8" `1215 
V L "bitpos_u8" 17 359 "uint8" `1216 
V L "nDiscrepancyMarker_u8" 17 360 "uint8" `1217 
V L "bit_b" 17 361 "bool" `1218 
V L "bStatus" 17 362 "bool" `1219 
V L "next_b" 17 363 "bool" `1220 
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 7 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindNextDevice" 17 345 1 "FUNCTION"
C L "DS1820_FindFirstDevice" 17 489 1 "*"
C L "DS1820_FindFirstDevice" 17 489 1 "*"
C L "DS1820_FindFirstDevice" 17 489 1 "*"
C L "DS1820_FindFirstDevice" 17 489 1 "*"
C L "DS1820_FindFirstDevice" 17 489 1 "*"
C L "DS1820_FindFirstDevice" 17 489 1 "*"
F G "DS1820_FindFirstDevice" 17 499 "int8()" `1221 
C L "DS1820_GetTempRaw" 17 507 1 "*"
C L "DS1820_GetTempRaw" 17 507 1 "*"
C L "DS1820_GetTempRaw" 17 507 1 "*"
C L "DS1820_GetTempRaw" 17 507 1 "*"
C L "DS1820_GetTempRaw" 17 507 1 "*"
C L "DS1820_GetTempRaw" 17 507 14 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
C L "DS1820_GetTempRaw" 17 536 1 "*"
F G "DS1820_GetTempRaw" 17 579 "sint16()" `1222 
V L "i" 17 580 "uint8" `1223 
V L "temp_u16" 17 581 "uint16" `1224 
V L "highres_u16" 17 582 "uint16" `1225 
V L "scrpad" 17 583 "uint8[9]" `1226  "--- start temperature conversion -------------------------------------- *"
C L "DS1820_GetTempRaw" 17 536 1 "FUNCTION"
C L "DS1820_GetTempRaw" 17 536 2 "FUNCTION"
C L "DS1820_GetTempRaw" 17 536 1 "FUNCTION"
C L "DS1820_GetTempRaw" 17 536 1 "FUNCTION"
C L "DS1820_GetTempRaw" 17 536 2 "FUNCTION"
C L "DS1820_GetTempRaw" 17 536 4 "FUNCTION"
C L "DS1820_GetTempRaw" 17 536 1 "FUNCTION"
C L "DS1820_GetTempRaw" 17 536 2 "FUNCTION"
C L "DS1820_GetTempRaw" 17 536 1 "FUNCTION"
C L "DS1820_GetTempRaw" 17 536 1 "FUNCTION"
C L "DS1820_GetTempRaw" 17 536 1 "FUNCTION"
C L "DS1820_GetTempRaw" 17 536 2 "FUNCTION"
C L "DS1820_GetTempFloat" 17 650 1 "*"
C L "DS1820_GetTempFloat" 17 650 1 "*"
C L "DS1820_GetTempFloat" 17 650 1 "*"
C L "DS1820_GetTempFloat" 17 650 1 "*"
C L "DS1820_GetTempFloat" 17 650 1 "*"
F G "DS1820_GetTempFloat" 17 659 "float()" `1227 
C G "" 17 664 1 "*"
C G "" 17 664 1 "*"
C G "" 17 664 1 "*"
C G "" 17 664 1 "*"
C G "" 17 664 1 "*"
C G "" 17 664 2 "*"
V G "KET_QUA_ANALOG" 15 7 "float[1]" `1228 
V G "temperature_float" 15 11 "float" `1229  "Gia tri nhiet do do duoc *"
V G "sensor_count" 15 13 "int8" `1230 
V G "KET_QUA_ANALOG_TEMP" 15 14 "float" `1231 
F G "READ_ANALOG" 15 20 "void()" `1232  "FOR (INT I =0; I<5; I++){"
C L "READ_ANALOG" 15 10 1 "FUNCTION"
V L "CHENH_LECH" 15 26 "float" `1233 
C L "READ_ANALOG" 15 10 2 "FUNCTION"
C L "READ_ANALOG" 15 10 1 "FUNCTION"
C L "READ_ANALOG" 15 10 1 "FUNCTION"
F G "SEND_ANALOG_UART" 15 53 "void()" `1234 
C L "SEND_ANALOG_UART" 15 10 1 "FUNCTION"
V L "PACKAGE_SS" 15 57 "*int8[1]" `1235 
V L "DO_DAI" 15 60 "int8" `1237 
V L "i" 15 61 "int8" `1238 
V L "K" 15 62 "int8" `1239 
C L "SEND_ANALOG_UART" 15 10 1 "FUNCTION"
F G "QUET_PHIM" 0 6 "void()" `1256 
V L "BDT" 0 7 "int8" `1257 
C L "QUET_PHIM" 0 8 1 "FUNCTION"
C L "QUET_PHIM" 0 8 1 "FUNCTION"
C L "QUET_PHIM" 0 8 1 "FUNCTION"
C L "QUET_PHIM" 0 8 1 "FUNCTION"
C L "QUET_PHIM" 0 8 1 "FUNCTION"
C L "QUET_PHIM" 0 8 1 "FUNCTION"
C L "QUET_PHIM" 0 8 1 "FUNCTION"
F G "NGAT_NGOAI" 0 44 "void()" `1258 
F G "NGAT" 0 50 "void()" `1259 
F G "XU_LY_UART" 0 65 "void()" `1260  "ID_NODE_NHAN = KYTU[1] - 48;"
C L "XU_LY_UART" 0 8 3 "FUNCTION"
V L "CH" 0 71 "int8" `1261 
V L "RET" 0 72 "*int8" `1262 
V L "LEN_RET" 0 76 "int8" `1264 
C L "XU_LY_UART" 0 8 1 "FUNCTION"
V L "_CHAR_TACH_" 0 82 "*int8" `1265 
C L "XU_LY_UART" 0 8 1 "FUNCTION"
V L "TOKEN" 0 84 "*int8" `1267 
C L "XU_LY_UART" 0 8 1 "FUNCTION"
C L "XU_LY_UART" 0 8 2 "FUNCTION"
C L "XU_LY_UART" 0 8 1 "FUNCTION"
C L "XU_LY_UART" 0 8 1 "FUNCTION"
C L "XU_LY_UART" 0 8 1 "FUNCTION"
C L "XU_LY_UART" 0 8 1 "FUNCTION"
F G "MAIN" 0 158 "void()" `1269 
C L "MAIN" 0 8 3 "FUNCTION"
C L "MAIN" 0 8 1 "FUNCTION"
C L "MAIN" 0 8 1 "FUNCTION"
C L "MAIN" 0 8 1 "FUNCTION"
C L "MAIN" 0 8 1 "FUNCTION"
V L "ABCD" 0 192 "int8" `1273 
C L "MAIN" 0 8 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
